ggplot(my_df, aes(factor(year), query_hits / refs_hits, group = query_id,
color = query_id)) +
geom_line(size = 1, alpha = 0.8) +
geom_point(size = 2) +
scale_color_brewer(name = "Query", palette = "Set1")+
xlab("Year published") +
ylab("Proportion of articles in Europe PMC")
my_df
hits_summary
install.packages("phytools")
library(phytools)
install.packages("phylotools")
library(phylotools)
install.packages("devtools")
library(devtools)
csvfilenames <- list.files("/home/bella/Dropbox/Master-Thesis/MA_Thesis_Program/Filtered_Data/CA1/Mean_Values",
pattern="*.csv", all.files=FALSE, full.names=FALSE)
for(i in 1:length(csvfilenames))
{
temp<-read.csv(paste(csvfilenames[i])) #give path if its not your wd
temp$filename_tag<-paste(csvfilenames[i])
list[[i]]<-temp
}
outfile<-as.data.frame(do.call(rbind,list))
list[[i]]<-temp
{
temp<-read.csv(paste(csvfilenames[i])) #give path if its not your wd
temp$filename_tag<-paste(csvfilenames[i])
list[[i]]<-temp
}
csvfilenames <- list.files("/home/bella/Dropbox/Master-Thesis/MA_Thesis_Program/Filtered_Data/CA1/Mean_Values",
pattern="*.csv", all.files=FALSE, full.names=FALSE)
for(i in 1:length(csvfilenames))
{
temp<-read.csv(paste(csvfilenames[i])) #give path if its not your wd
temp$filename_tag<-paste(csvfilenames[i])
list[[i]]<-temp
}
outfile<-as.data.frame(do.call(rbind,list))
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("~/R/x86_64-pc-linux-gnu-library/3.4/phylotools/R/phylotools", repos = NULL)
install.packages("ggtree")
install.packages("ggtree", dependencies = TRUE)
install.packages("devtools")
library(devtools)
install.packages("tidyverse")
library(tidyverse)
devtools::install_github("hadley/devtools")
installed.packages()
install.packages("devtools")
devtools::install_github("hadley/devtools")
install.packages("tidyverse", repos = "https://github.com/tidyverse/tidyverse")
tags <- c("ggplot2", "data.table", "plyr", "knitr", "shiny", "xts", "lattice")
pkgDep(tags, suggests = TRUE, enhances = FALSE, availPkgs = cranJuly2014)
library("miniCRAN")
install.packages("miniCRAN")
pkgDep(tags, suggests = TRUE, enhances = FALSE, availPkgs = cranJuly2014)
library("miniCRAN")
tree <- read.nexus("rom.nex")
library(ape)
library(ggtree)
library(phangorn)
library(ggplot2)
library(tidyverse)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages(
"ggplot2",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com")
)
.libPaths()
install.packages("ggplot2",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
library("ape", lib.loc="/usr/local/lib/R/site-library")
remove.packages("ape", lib="/usr/local/lib/R/site-library")
library("yaml", lib.loc="/usr/local/lib/R/site-library")
remove.packages("yaml", lib="/usr/local/lib/R/site-library")
install.packages("ape")
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
library("tools")
removeDepends <- function(pkg, recursive = FALSE){
d <- package_dependencies(,installed.packages(), recursive = recursive)
depends <- if(!is.null(d[[pkg]])) d[[pkg]] else character()
needed <- unique(unlist(d[!names(d) %in% c(pkg,depends)]))
toRemove <- depends[!depends %in% needed]
if(length(toRemove)){
toRemove <- select.list(c(pkg,sort(toRemove)), multiple = TRUE,
title = "Select packages to remove")
remove.packages(toRemove)
return(toRemove)
} else {
invisible(character())
}
}
.libPaths()
.libPaths()
.libPaths()
install.packages("ggplot2")
library("ape", lib.loc="/usr/local/lib/R/site-library")
library("askpass", lib.loc="/usr/local/lib/R/site-library")
library("assertthat", lib.loc="/usr/local/lib/R/site-library")
library("backports", lib.loc="/usr/local/lib/R/site-library")
detach("package:backports", unload=TRUE)
detach("package:assertthat", unload=TRUE)
detach("package:askpass", unload=TRUE)
detach("package:ape", unload=TRUE)
install.packages("/tmp/Rtmp1SX5Rv/downloaded_packages/ggplot2_3.1.0.tar.gz", repos = NULL, type = "source")
install.packages("Rcpp")
library("yaml", lib.loc="/usr/local/lib/R/site-library")
remove.packages("yaml", lib="/usr/local/lib/R/site-library")
uninstall.packages("yaml")
.libPaths()
library("ggplot2", lib.loc="/usr/local/lib/R/site-library")
RUN Rscript -e "install.packages('devtools')"
library("ape", lib.loc="/usr/local/lib/R/site-library")
warnings()
install.packages("phytools",dependencies = TRUE)
install.packages("animation")
library(VIM)
install.packages("VIM")
library(VIM)
library(dplyr)
setwd("/home/bella/Dropbox/Master-Thesis/MA_Thesis_Program/Output/")
rom <- read.table("new_scores.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
t_col <- function(color, percent = 50, name = NULL) {
#	  color = color name
#	percent = % transparency
#	   name = an optional name for the color
## Get RGB values for named color
rgb.val <- col2rgb(color)
## Make new color using input color as base and alpha set by transparency
t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100-percent)*255/100,
names = name)
## Save the color
invisible(t.col)
}
mycol1 <- t_col("pink", perc = 90, name = "lt.pink")
mycol2 <- t_col("red", perc = 70, name = "lt.pink")
mycol3 <- t_col("blue", perc = 70, name = "lt.pink")
#########FUNCTIONS#########
plot_histogram <- function(df, feature) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)))) +
geom_histogram(aes(y = ..density..), alpha=0.7, fill="#33AADE", color="black") +
geom_density(alpha=0.3, fill="red") +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
print(plt)
}
plot_multi_histogram <- function(df, feature, label_column) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)), fill=eval(parse(text=label_column)))) +
geom_histogram(alpha=0.7, position="identity", aes(y = ..density..), color="black") +
geom_density(alpha=0.7) +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
plt + guides(fill=guide_legend(title=label_column))
}
####preprocessing
setwd("/home/bella/Dropbox/Master-Thesis/MA_Thesis_Program/Filtered_Data_Romance/Mean_Values/")
iran <- read.table("mean_values_sc1.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
library(ggrepel)
library(ggplot2)
library(wesanderson)
ggplot(iran, aes(x=reorder(Language_Pairs, Score), y=Score)) +
geom_point() +
geom_text(aes(label=Language_Pairs),hjust=0, vjust=0)+
geom_label_repel(aes(label = Language_Pairs),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab("Language Pairs")+ # for the x axis label
ylab("Score")+
ggtitle("Logudorese")+
theme(plot.title = element_text(color="#993333", size=14, face="bold"))+  #geom_smooth(method=lm, aes(fill=MAX))+
geom_smooth(method=lm, se=FALSE)+
theme(axis.text.x = element_text( color="#993333",
size=10,angle = 45),
axis.text.y = element_text( color="#993333",
size=10, angle = 45))
iran <- read.table("mean_values_sc1.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
ggplot(iran, aes(x=reorder(Language_Pairs, Score), y=Score)) +
geom_point() +
geom_text(aes(label=Language_Pairs),hjust=0, vjust=0)+
geom_label_repel(aes(label = Language_Pairs),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab("Language Pairs")+ # for the x axis label
ylab("Score")+
ggtitle("Logudorese")+
theme(plot.title = element_text(color="#993333", size=14, face="bold"))+  #geom_smooth(method=lm, aes(fill=MAX))+
geom_smooth(method=lm, se=FALSE)+
theme(axis.text.x = element_text( color="#993333",
size=10,angle = 45),
axis.text.y = element_text( color="#993333",
size=10, angle = 45))
ggplot(iran, aes(x=reorder(Language_Pairs, Score), y=Score)) +
geom_point() +
geom_text(aes(label=Language_Pairs),hjust=0, vjust=0)+
geom_label_repel(aes(label = Language_Pairs),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab("Language Pairs")+ # for the x axis label
ylab("Score")+
ggtitle("Palermitan Sicilian")+
theme(plot.title = element_text(color="#993333", size=14, face="bold"))+  #geom_smooth(method=lm, aes(fill=MAX))+
geom_smooth(method=lm, se=FALSE)+
theme(axis.text.x = element_text( color="#993333",
size=10,angle = 45),
axis.text.y = element_text( color="#993333",
size=10, angle = 45))
iran <- read.table("mean_values_ve1.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
iran <- read.table("mean_values_ve1.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
ggplot(iran, aes(x=reorder(Language_Pairs, Score), y=Score)) +
geom_point() +
geom_text(aes(label=Language_Pairs),hjust=0, vjust=0)+
geom_label_repel(aes(label = Language_Pairs),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab("Language Pairs")+ # for the x axis label
ylab("Score")+
ggtitle("Venice Venetian")+
theme(plot.title = element_text(color="#993333", size=14, face="bold"))+  #geom_smooth(method=lm, aes(fill=MAX))+
geom_smooth(method=lm, se=FALSE)+
theme(axis.text.x = element_text( color="#993333",
size=10,angle = 45),
axis.text.y = element_text( color="#993333",
size=10, angle = 45))
aggr(rom)
library(lubridate)
clusters <- kmeans(iran[,2:3], 2)
clusters <- kmeans(iran[,1:3], 2)
clusters <- kmeans(iran, 2)
clusters <- Kmeans(iran[,1:3], 2)
clusters <- kmeans(iran[,1:3], 2)
clusters <- kmeans(iran[,0:2], 2)
clusters <- kmeans(iran[,0:2],na.omit(irisa.features), 2)
clusters <- kmeans(na.omit(iran[,0:2]), 2)
clusters <- kmeans(na.omit(iran), 2)
clusters <- kmeans(na.omit(rom), 2)
clusters <- kmeans(na.omit(rom[,0:2]), 2)
rom <- read.table("new_scores.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
aggr(rom)
clusters <- kmeans(na.omit(rom[,0:2]), 2)
clusters <- kmeans(na.omit(rom[,:2]), 2)
clusters <- kmeans(na.omit(rom[,2]), 2)
rom <- read.table("mean_values_sc1.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
aggr(rom)
clusters <- kmeans(na.omit(rom[,2]), 2)
setwd("/home/bella/Dropbox/Master-Thesis/MA_Thesis_Program/Output/")
rom <- read.table("new_scores.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
aggr(rom)
clusters <- kmeans(na.omit(rom[,2]), 2)
clusters <- kmeans(na.omit(rom[,2]), 5)
clusters <- kmeans(na.omit(rom[,2]), 2)
clusters <- kmeans(rom[,2],2 )
setwd("/home/bella/Dropbox/Master-Thesis/MA_Thesis_Program/Output/")
rom <- read.table("new_scores.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
tail(rom)
head(rom)
clusters <- kmeans(na.omit(rom[,2]),center= 2)
clusters <- kmeans(na.omit(rom[,2]),center= 2)
clusters <- kmeans(na.omit(rom),center= 2)
aggr(rom[,2])
aggr(rom)
clusters <- kmeans(na.omit(rom[,2]))
clusters <- kmeans(na.omit(rom[,2]),centers = 2)
library(boot)
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(coef(fit))
}
results <- boot(data=rom, statistic=bs,
R=1000, formula=rom~Score)
results <- boot(data=rom, statistic=bs,
R=1000, formula=rom~Score)
head(rom)
rom <- read.table("new_scores.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
head(rom)
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(coef(fit))
}
results <- boot(data=rom, statistic=bs,
R=1000, formula=rom~Score)
results <- boot(data=rom, statistic=bs,
R=1000)
results <- boot(data=rom, statistic=bs,
R=1000, formula=Score)
results <- boot(data=rom, statistic=bs,
R=1000, formula=rom$Score)
c(
cor(dt[,1], dt[,2], method='s'),
median(dt[,1]),
median(dt[,2])
)
foo <- function(data, indices, cor.type){
dt<-data[indices,]
c(
cor(dt[,1], dt[,2], method=cor.type),
median(dt[,1]),
median(dt[,2])
)
}
myBootstrap <- boot(rom, foo, R=1000, cor.type='s')
c(
cor(dt[,2], dt[,2], method=cor.type),
median(dt[,1]),
median(dt[,2])
)
c(
cor(dt[,2], dt[,2], method=cor.type),
median(dt[,1]),
median(dt[,2])
)
c(
cor(dt[,1], dt[,2], method=cor.type),
median(dt[,1]),
median(dt[,2])
)
f
foo <- function(data, indices, cor.type){
dt<-data[indices,]
c(
cor(dt[,1], dt[,2], method=cor.type),
median(dt[,1]),
median(dt[,2])
)
}
myBootstrap <- boot(rom, foo, R=1000, cor.type='s')
View(iran)
library(iris)
set.seed(12345)
myBootstrap <- boot(iris, foo, R=1000, cor.type='s')
head(myBootstrap$t)
myBootstrap <- boot(rom[,2], foo, R=1000, cor.type='s')
myBootstrap <- boot(rom, foo, R=1000, cor.type='s')
head(iris)
c(
cor(dt[,2], dt[,2], method=cor.type),
median(dt[,2]),
median(dt[,2])
)
c(
cor(dt[,1], dt[,2], method=cor.type),
median(dt[,2]),
median(dt[,2])
)
myBootstrap <- boot(rom, R=1000, cor.type='s')
myBootstrap <- boot(rom[2], foo, R=1000, cor.type='s')
myBootstrap <- boot(rom, foo, R=1000, cor.type='s')
